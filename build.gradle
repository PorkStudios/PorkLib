/*
 * Adapted from The MIT License (MIT)
 *
 * Copyright (c) 2018-2022 DaPorkchop_
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * Any persons and/or organizations using this software must include the above copyright notice and this permission notice,
 * provide sufficient credit to the original authors of the project (IE: DaPorkchop_), as well as provide a link to the original project.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

allprojects {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "maven-publish"

    group "net.daporkchop"
    version "$porklibVersion"

    compileJava {
        sourceCompatibility = targetCompatibility = "$javaVersion"
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    repositories {
        maven {
            name = "DaPorkchop_"
            url = "https://maven.daporkchop.net/"
        }
        mavenCentral()
    }

    sourceSets {
        example {
            java {
                compileClasspath += main.output
                compileClasspath += main.compileClasspath
                runtimeClasspath += main.output
                runtimeClasspath += main.runtimeClasspath
            }
        }
    }

    dependencies {
        if (!("root".equalsIgnoreCase(project.name) || "common".equalsIgnoreCase(project.name) || "unsafe".equalsIgnoreCase(project.name))) {
            api project(":common")
        }

        testImplementation "junit:junit:$junitVersion"

        compileOnly "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
    }

    publishing {
        repositories {
            /*if (project.hasProperty("opencollabMavenUsername") && project.hasProperty("opencollabMavenPassword")) {
                maven {
                    credentials {
                        username = "$opencollabMavenUsername"
                        password = "$opencollabMavenPassword"
                    }

                    name = "NukkitX"
                    url = version.endsWith("SNAPSHOT") ? "https://repo.opencollab.dev/maven-snapshots/" : "https://repo.opencollab.dev/release/"
                }
            }*/
            if (project.hasProperty("daporkchopMavenUsername") && project.hasProperty("daporkchopMavenPassword")) {
                maven {
                    credentials {
                        username = "$daporkchopMavenUsername"
                        password = "$daporkchopMavenPassword"
                    }

                    name = "DaPorkchop_"
                    url = version.endsWith("SNAPSHOT") ? "https://maven.daporkchop.net/snapshot/" : "https://maven.daporkchop.net/release/"
                }
            }
        }

        publications {
            maven(MavenPublication) {
                groupId = "net.daporkchop.lib"
                artifactId = "PorkLib".equalsIgnoreCase(project.name) ? "full" : project.name
                version = project.version

                from components.java

                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
    }

    if (!project.name.contains("generator")) {
        publish.dependsOn(publishToMavenLocal)
        build.dependsOn(publish)
    }

    test {
        testLogging {
            //show System.out calls in tests in gradle output
            showStandardStreams = true

            showExceptions = true
            showStackTraces = true
            showCauses = true
        }
    }
}

dependencies {
    for (Project prj : project.allprojects) {
        if (!"PorkLib".equalsIgnoreCase(prj.name) && prj.parent.name.equalsIgnoreCase("PorkLib")) {
            api project(":" + prj.name)
        }
    }
}
