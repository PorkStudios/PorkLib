$$$settings$$$
{
    "params": [
        {
            "genericName": "E"
        }
    ]
}
_headers_

import net.daporkchop.lib.primitive.lambda._P0_Consumer;
import net.daporkchop.lib.primitive.lambda._P0_BoolFunction;

/**
 * The most simple abstraction of a collection. Supports adding, removing, counting and iterating over
 * elements. The exact behavior of all methods are implementation-specific.
 *
 * @author DaPorkchop_
 */
public interface _P0_Collection_G_ extends _P0_Iterable_G_ {
    /**
     * @return the number of elements in this collection, or {@link Integer#MAX_VALUE} if the size is too large to fit in an {@code int}
     */
    int size();

    /**
     * @return whether or not this collection is empty
     */
    boolean isEmpty();

    /**
     * Checks if the collection contains the given value.
     * <p>
     * This function checks for a value that is equal to the given value. What exactly constitutes equality
     * between two values is up to the implementation to decide, although generally it will check using the
     * {@code ==} operator or {@link Object#equals(Object)}.
     *
     * @param val the value to check for
     * @return whether or not the collection contains an equal value
     */
    boolean contains(_p0_ val);

    /**
     * @return an array containing all the values in this collection in iteration order
     */
    _p0_[] toArray();

    /**
     * Returns an array containing all the values in this collection in iteration order.
     * <p>
     * If the given array is {@code null} or too small, a new one will be created and returned.
     * <p>
     * If the given array is too large, the element immediately following the final value will be set to {@code _EP0_}.
     *
     * @return an array containing all the values in this collection in iteration order
     */
    _p0_[] toArray(_p0_[] a);

    /**
     * Adds a value to the collection.
     * <p>
     * Some implementations may refuse to add elements (e.g. if they have a maximum size or do not accept
     * {@code null} values), and will return {@code false} if the add operation was refused. See
     * documentation for the implementation for more information.
     *
     * @param val the value to be added
     * @return whether or not the value was added
     * @throws UnsupportedOperationException if this implementation does not allow adding elements
     */
    boolean add(_p0_ val) throws UnsupportedOperationException;

    /**
     * Removes a single instance of a value from the collection.
     * <p>
     * If no matching values could be found, this will return {@code false}, {@code true} otherwise.
     *
     * @param val the value to be removed
     * @throws UnsupportedOperationException if this implementation does not allow removing elements
     */
    boolean remove(_p0_ val) throws UnsupportedOperationException;

    /**
     * @return whether or not this collection contains all of the elements in the given collection
     */
    boolean containsAll(@NonNull _P0_Collection c);

    /**
     * Adds all of the elements in the given collection to this collection in iteration order.
     *
     * @whether or not this collection changed as a result of the call
     */
    boolean addAll(@NonNull _P0_Collection c);

    /**
     * Removes all of the elements in the given collection from this collection.
     *
     * @whether or not this collection changed as a result of the call
     */
    boolean removeAll(@NonNull _P0_Collection c);

    /**
     * Removes all of the elements of this collection that match the given predicate.
     *
     * @whether or not this collection changed as a result of the call
     */
    default boolean removeIf(@NonNull _P0_BoolFunction filter)  {
        boolean removed = false;
        for (_P0_Iterator itr = this.iterator(); itr.hasNext();)    {
            if (filter.applyAsBool(itr.next_P0_()))    {
                itr.remove();
                removed = true;
            }
        }
        return removed;
    }

    /**
     * Removes all of the elements not contained in the given collection from this collection.
     *
     * @whether or not this collection changed as a result of the call
     */
    boolean retainAll(@NonNull _P0_Collection c);

    /**
     * Removes all of the elements from this collection.
     */
    void clear();

    /**
     * @return a sequential {@link _P0_Stream} with this collection as its source.
     */
    /*default _P0_Stream stream() {
        return StreamSupport.stream(spliterator(), false);
    }*/

    /**
     * @return a possibly parallel {@link _P0_Stream} with this collection as its source.
     */
    /*default _P0_Stream parallelStream() {
        return StreamSupport.stream(spliterator(), true);
    }*/
}
