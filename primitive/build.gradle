/*
 * Adapted from The MIT License (MIT)
 *
 * Copyright (c) 2018-2022 DaPorkchop_
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * Any persons and/or organizations using this software must include the above copyright notice and this permission notice,
 * provide sufficient credit to the original authors of the project (IE: DaPorkchop_), as well as provide a link to the original project.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

sourceSets {
    orig
    generated
    testOrig
}

dependencies {
    //orig
    origImplementation project(":unsafe")
    origImplementation project(":primitive:primitive-lambda")

    origCompileOnly "org.projectlombok:lombok:$lombokVersion"
    origAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    //generated
    generatedImplementation project(":unsafe")
    generatedImplementation project(":primitive:primitive-lambda")
    generatedImplementation sourceSets.orig.output

    generatedCompileOnly "org.projectlombok:lombok:$lombokVersion"
    generatedAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    //main
    api project(":primitive:primitive-lambda")

    api sourceSets.orig.output
    api sourceSets.generated.output

    //testOrig
    testOrigCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testOrigAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    //test
    testImplementation project(":primitive:primitive-lambda")
    testImplementation sourceSets.testOrig.output
}

compileOrigJava.dependsOn(":primitive:generator:gen")
compileGeneratedJava.dependsOn(compileOrigJava)
compileJava.dependsOn(compileGeneratedJava)
compileTestJava.dependsOn(":primitive:generator:gen", compileTestOrigJava)

task deleteSource(type: Delete) {
    delete "src/generated"
    delete "src/test"
}

clean.dependsOn(deleteSource)

compileJava {
    options.fork = true
    options.forkOptions.setMemoryMaximumSize("2G")
}

jar {
    from sourceSets.orig.output
    from sourceSets.generated.output
}

sourceJar {
    from sourceSets.orig.allSource
    from sourceSets.generated.allSource
}
